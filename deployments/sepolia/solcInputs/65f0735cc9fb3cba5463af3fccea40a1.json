{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/interfaces/ILotteryGame.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\ninterface ILotteryGame {\n    function drawWinners(\n        uint256 lotteryId,\n        uint256 numberOfWinners\n    ) external payable;\n}\n"
    },
    "contracts/interfaces/ILotteryManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\ninterface ILotteryManager {\n    struct LotteryStruct {\n        uint256 id;\n        string title;\n        string description;\n        string imageURL;\n        uint256 ticketPrice;\n        uint256 numOfParticipants;\n        uint256 servicePercent;\n        bool drawn;\n        address owner;\n        uint256 createdAt;\n        uint256 expiresAt;\n    }\n    struct ParticipationStruct {\n        address account;\n        string lotteryNumber;\n    }\n    struct LuckyNumber {\n        string number;\n        bool isUsed;\n    }\n\n    function createLottery(\n        string memory title,\n        string memory description,\n        string memory imageURL,\n        uint256 prize,\n        uint256 ticketPrice,\n        uint256 expiresAt\n    ) external;\n\n    function importLuckyNumbers(\n        uint256 id,\n        string[] memory luckyNumbers\n    ) external;\n    function buyTicket(uint256 id, uint256 luckyNumberIndex) external payable;\n    function getAvailableLuckyNumbers(\n        uint256 lotteryId\n    ) external view returns (string[] memory available);\n    function getLotteryParticipantsAddresses(\n        uint256 id\n    ) external view returns (address[] memory);\n    function getLotteryParticipants(\n        uint256 id\n    ) external view returns (ParticipationStruct[] memory);\n    function getJackpot(uint256 lotteryId) external view returns (uint256);\n    function getLottery(\n        uint256 lotteryId\n    ) external view returns (LotteryStruct memory);\n    function getLotteries() external view returns (LotteryStruct[] memory);\n}\n"
    },
    "contracts/LotteryManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport {ILotteryGame} from \"./interfaces/ILotteryGame.sol\";\nimport {ILotteryManager} from \"./interfaces/ILotteryManager.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nerror NoLotteryOwner(string reason);\nerror OnlyGame(string reason);\nerror SimpleError(string reason);\n\ncontract LotteryManager is Ownable, ILotteryManager {\n    ILotteryGame public game;\n    uint256 private _totalLotteries;\n    uint256 private constant MAX_WINNERS = 50;\n    uint256 public platformBalance;\n\n    // mappings\n    mapping(uint256 => LotteryStruct) private lotteries;\n    mapping(uint256 => ParticipationStruct[]) private lotteryParticipants;\n    mapping(uint256 => LuckyNumber[]) private lotteryLuckyNumbers;\n\n    // events (define log schema)\n    event LotteryCreated(uint256 indexed id, address indexed owner);\n    event TicketBought(uint256 indexed id, address indexed owner);\n    event LuckyNumbersImported(uint256 indexed id, uint256 count);\n\n    // using this makes sure that the function is only executable by the owner of the lottery.\n    modifier onlyLotteryOwner(uint256 id) {\n        if (lotteries[id].owner != msg.sender) {\n            revert NoLotteryOwner(\"Only callable by owner!\");\n        }\n        _;\n    }\n\n    modifier onlyGame() {\n        if (address(game) != msg.sender) {\n            revert OnlyGame(\"Only callable by lottery game!\");\n        }\n        _;\n    }\n    constructor() Ownable(msg.sender) {}\n\n    function setGame(address _game) public onlyOwner {\n        game = ILotteryGame(_game);\n    }\n\n    // everyone can create a Lottery\n    function createLottery(\n        string memory title,\n        string memory description,\n        string memory imageURL,\n        uint256 ticketPrice,\n        uint256 servicePercent,\n        uint256 expiresAt\n    ) external {\n        // sanity checks\n        if (bytes(title).length == 0)\n            revert SimpleError(\"Title cannot be empty\");\n        if (ticketPrice == 0)\n            revert SimpleError(\"Ticket Prize must be positive\");\n        if (expiresAt <= block.timestamp)\n            revert SimpleError(\"Expiration must be in future\");\n\n        uint256 lotteryId = _totalLotteries;\n        _totalLotteries += 1;\n\n        // create new lottery\n        LotteryStruct memory newLottery = LotteryStruct({\n            id: lotteryId,\n            title: title,\n            imageURL: imageURL,\n            description: description,\n            ticketPrice: ticketPrice,\n            servicePercent: servicePercent,\n            numOfParticipants: 0,\n            drawn: false,\n            owner: msg.sender,\n            createdAt: block.timestamp,\n            expiresAt: expiresAt\n        });\n\n        // add lottery\n        lotteries[lotteryId] = newLottery;\n        // Fire event\n        emit LotteryCreated(lotteryId, msg.sender);\n    }\n\n    // owner uploads n lucky numbers\n    function importLuckyNumbers(\n        uint256 lotteryId,\n        string[] memory luckyNumbers\n    ) external onlyLotteryOwner(lotteryId) {\n        if (lotteryLuckyNumbers[lotteryId].length != 0)\n            revert SimpleError(\"Already imported\");\n        if (lotteries[lotteryId].numOfParticipants != 0)\n            revert SimpleError(\"Participants already joined\");\n        if (luckyNumbers.length == 0) revert SimpleError(\"Empty list\");\n\n        for (uint256 i = 0; i < luckyNumbers.length; i++) {\n            lotteryLuckyNumbers[lotteryId].push(\n                LuckyNumber({number: luckyNumbers[i], isUsed: false})\n            );\n        }\n        emit LuckyNumbersImported(lotteryId, luckyNumbers.length);\n    }\n\n    // function callable by anyone\n    function buyTicket(\n        uint256 lotteryId,\n        uint256 luckyNumberIndex\n    ) external payable {\n        // reference lottery on chain\n        LotteryStruct storage lottery = lotteries[lotteryId];\n        if (msg.value < lottery.ticketPrice)\n            revert SimpleError(\"Insufficient ETH\");\n        if (block.timestamp > lottery.expiresAt)\n            revert SimpleError(\"Cannot buy Tickets anymore.\");\n        if (lottery.drawn) revert SimpleError(\"Lottery already drawn!\");\n\n        LuckyNumber storage luckyNumber = lotteryLuckyNumbers[lotteryId][\n            luckyNumberIndex\n        ];\n        // use index, because it is more gas friendly than string comparison using hashing\n        if (luckyNumber.isUsed) revert SimpleError(\"Number already used!\");\n\n        lotteryParticipants[lotteryId].push(\n            ParticipationStruct({\n                account: msg.sender,\n                lotteryNumber: luckyNumber.number\n            })\n        );\n\n        lottery.numOfParticipants++;\n        luckyNumber.isUsed = true;\n\n        emit TicketBought(lotteryId, msg.sender);\n    }\n\n    // draw winners\n    function drawWinners(\n        uint256 lotteryId,\n        uint256 numberOfWinners\n    ) external onlyLotteryOwner(lotteryId) {\n        ILotteryManager.LotteryStruct storage lottery = lotteries[lotteryId];\n        if (lottery.drawn) revert SimpleError(\"Lottery already drawn\");\n        if(block.timestamp < lottery.expiresAt) revert SimpleError (\"Lottery not expired yet\");\n        if (numberOfWinners < 1)\n            revert SimpleError(\"Must have at least one winner\");\n        if (\n            numberOfWinners > lottery.numOfParticipants ||\n            numberOfWinners > MAX_WINNERS\n        ) revert SimpleError(\"Too many winners\");\n\n        // forward to game\n        uint256 jackpot = lottery.ticketPrice * lottery.numOfParticipants;\n        lottery.drawn = true;\n        game.drawWinners{value: jackpot}(lotteryId, numberOfWinners);\n    }\n\n    function getAvailableLuckyNumbers(\n        uint256 lotteryId\n    ) external view returns (string[] memory available) {\n        LuckyNumber[] storage all = lotteryLuckyNumbers[lotteryId];\n\n        uint256 count = 0;\n        for (uint256 i = 0; i < all.length; i++) {\n            if (!all[i].isUsed) {\n                count++;\n            }\n        }\n\n        available = new string[](count);\n\n        uint256 j = 0;\n        for (uint256 i = 0; i < all.length; i++) {\n            if (!all[i].isUsed) {\n                available[j] = all[i].number;\n                j++;\n            }\n        }\n\n        return available;\n    }\n\n    function getLottery(\n        uint256 lotteryId\n    ) external view returns (LotteryStruct memory) {\n        return lotteries[lotteryId];\n    }\n\n    function getLotteries()\n        external\n        view\n        returns (LotteryStruct[] memory _lotteries)\n    {\n        _lotteries = new LotteryStruct[](_totalLotteries);\n        for (uint256 i = 0; i < _totalLotteries; i++) {\n            _lotteries[i] = lotteries[i];\n        }\n    }\n\n    // getter for the lottery numOfParticipant\n    function getLotteryParticipantsAddresses(\n        uint256 lotteryId\n    ) external view returns (address[] memory) {\n        address[] memory _participations = new address[](\n            lotteryParticipants[lotteryId].length\n        );\n        for (uint256 i = 0; i < lotteryParticipants[lotteryId].length; ++i) {\n            _participations[i] = lotteryParticipants[lotteryId][i].account;\n        }\n        return _participations;\n    }\n\n    function getLotteryParticipants(\n        uint256 lotteryId\n    ) external view returns (ParticipationStruct[] memory) {\n        ParticipationStruct[]\n            memory _participations = new ParticipationStruct[](\n                lotteryParticipants[lotteryId].length\n            );\n        for (uint256 i = 0; i < lotteryParticipants[lotteryId].length; ++i) {\n            _participations[i] = lotteryParticipants[lotteryId][i];\n        }\n        return _participations;\n    }\n\n    function getJackpot(uint256 lotteryId) external view returns (uint256) {\n        LotteryStruct storage lottery = lotteries[lotteryId];\n        return lottery.ticketPrice * lottery.numOfParticipants;\n    }\n\n    function getLuckyNumbers(\n        uint256 lotteryId\n    ) external view returns (string[] memory luckyNumbers) {\n        luckyNumbers = new string[](lotteryLuckyNumbers[lotteryId].length);\n        for (uint256 i = 0; i < lotteryLuckyNumbers[lotteryId].length; ++i) {\n            luckyNumbers[i] = lotteryLuckyNumbers[lotteryId][i].number;\n        }\n        return luckyNumbers;\n    }\n\n    function getTotalLotteries() external view returns (uint256) {\n        return _totalLotteries;\n    }\n\n    function getBalance() public view returns (uint256) {\n        return address(this).balance;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}