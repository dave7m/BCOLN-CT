{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(\n    uint64 subId\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  // solhint-disable-next-line chainlink-solidity/prefix-immutable-variables-with-i\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/LotteryGame.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport {VRFCoordinatorV2Interface} from \"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport {VRFConsumerBaseV2} from \"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\";\nimport {ILotteryManager} from \"./LotteryManager.sol\";\n\nerror OnlyManager(string reason);\nerror NoFunds();\n\ncontract LotteryGame is VRFConsumerBaseV2, Ownable, ReentrancyGuard {\n    ILotteryManager public manager;\n\n    modifier onlyManager() {\n        if (address(manager) != msg.sender) {\n            revert OnlyManager(\"Only callable by lottery manager!\");\n        }\n        _;\n    }\n\n    // VRF fields\n    VRFCoordinatorV2Interface private immutable COORDINATOR;\n    uint256 private immutable SUBSCRIPTION_ID;\n    bytes32 private immutable KEY_HASH;\n    uint32 private immutable CALLBACK_GAS_LIMIT = 100000;\n    uint16 private immutable REQUEST_CONFIRMATIONS = 3;\n    // VRF does not guarantee unique words, therefore, we fetch one random word which is then used deterministically\n    // for determining the winners.\n    uint32 private immutable NUM_WORDS = 1;\n\n    mapping(uint256 => uint256) public requestIdToLotteryId;\n    mapping(uint256 => uint256) public requestIdToNumberOfWinners;\n    mapping(uint256 => uint256) public requestIdToLotteryPrizePool;\n\n    mapping(address => uint256) public pendingWithdrawals;\n    event WinnersDrawn(\n        uint256 indexed lotteryId,\n        ILotteryManager.ParticipationStruct[] winners,\n        uint256 prizePerWinner,\n        uint256 seed\n    );\n    event Deposit(address indexed to, uint256 amount);\n\n    struct LotteryResult {\n        bool completed;\n        uint256 timestamp;\n        ILotteryManager.ParticipationStruct[] winners;\n        uint256 prizePerWinner;\n        uint256 seed;\n    }\n\n    mapping(uint256 => LotteryResult) public lotteryResults;\n\n    constructor(\n        address vrfCoordinator,\n        bytes32 _keyHash,\n        uint256 subscriptionId,\n        address managerAddress\n    ) VRFConsumerBaseV2(vrfCoordinator) Ownable(msg.sender) {\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\n        KEY_HASH = _keyHash;\n        SUBSCRIPTION_ID = subscriptionId;\n        manager = ILotteryManager(managerAddress);\n    }\n\n    // only callable by the LotteryManager contract\n    function drawWinners(\n        uint256 lotteryId,\n        uint256 numberOfWinners\n    ) external payable onlyManager {\n        uint256 expected = manager.getJackpot(lotteryId);\n        if (msg.value != expected) revert NoFunds();\n\n        // request random number\n        uint256 requestId = COORDINATOR.requestRandomWords(\n            KEY_HASH,\n            uint64(SUBSCRIPTION_ID),\n            REQUEST_CONFIRMATIONS,\n            CALLBACK_GAS_LIMIT,\n            NUM_WORDS\n        );\n\n        // save lotteryId under that request\n        requestIdToLotteryId[requestId] = lotteryId;\n        requestIdToNumberOfWinners[requestId] = numberOfWinners;\n        requestIdToLotteryPrizePool[requestId] = msg.value;\n    }\n\n    // callback called by vrf\n    function fulfillRandomWords(\n        uint256 requestId,\n        uint256[] memory randomWords\n    ) internal override {\n        uint256 lotteryId = requestIdToLotteryId[requestId];\n        uint256 numberOfWinners = requestIdToNumberOfWinners[requestId];\n\n        ILotteryManager.LotteryStruct memory lottery = manager.getLottery(\n            lotteryId\n        );\n        ILotteryManager.ParticipationStruct[] memory participants = manager\n            .getLotteryParticipants(lotteryId);\n\n        // select winners\n        ILotteryManager.ParticipationStruct[] memory winners = _selectWinners(\n            participants,\n            numberOfWinners,\n            randomWords[0]\n        );\n\n        // calculate prizes\n        uint256 totalPrize = requestIdToLotteryPrizePool[requestId];\n        uint256 platformFee = (totalPrize * lottery.servicePercent) / 100;\n        uint256 prizePerWinner = (totalPrize - platformFee) / numberOfWinners;\n\n        // 4) **deposit** into each recipient’s withdrawal balance\n        for (uint256 i = 0; i < winners.length; i++) {\n            pendingWithdrawals[winners[i].account] += prizePerWinner;\n            emit Deposit(winners[i].account, prizePerWinner);\n        }\n        // deposit the owner fee\n        pendingWithdrawals[lottery.owner] += platformFee;\n        emit Deposit(lottery.owner, platformFee);\n\n        emit WinnersDrawn(lotteryId, winners, prizePerWinner, randomWords[0]);\n\n        LotteryResult storage result = lotteryResults[lotteryId];\n        result.completed = true;\n        result.timestamp = block.timestamp;\n        result.prizePerWinner = prizePerWinner;\n        result.seed = randomWords[0];\n\n        for (uint256 i = 0; i < winners.length; i++) {\n            result.winners.push(winners[i]);\n        }\n\n        // cleanup\n        delete requestIdToLotteryId[requestId];\n        delete requestIdToNumberOfWinners[requestId];\n        delete requestIdToLotteryPrizePool[requestId];\n    }\n\n    function _selectWinners(\n        ILotteryManager.ParticipationStruct[] memory participants,\n        uint256 _numberOfWinners,\n        uint256 seed\n    ) private pure returns (ILotteryManager.ParticipationStruct[] memory) {\n        ILotteryManager.ParticipationStruct[]\n            memory selected = new ILotteryManager.ParticipationStruct[](\n                _numberOfWinners\n            );\n        uint256[] memory indices = _fisherYates(participants.length, seed);\n\n        for (uint256 i = 0; i < _numberOfWinners; i++) {\n            selected[i] = participants[indices[i]];\n        }\n\n        return selected;\n    }\n\n    // shuffle\n    function _fisherYates(\n        uint256 n,\n        uint256 seed\n    ) private pure returns (uint256[] memory) {\n        uint256[] memory indices = new uint256[](n);\n        for (uint256 i = 0; i < n; i++) indices[i] = i;\n\n        for (uint256 i = n - 1; i > 0; i--) {\n            // select\n            uint256 j = uint256(keccak256(abi.encodePacked(seed, i))) % (i + 1);\n            // swap\n            (indices[i], indices[j]) = (indices[j], indices[i]);\n        }\n\n        return indices;\n    }\n\n    // recipients (winners & owner) call this to pull their ETH\n    function withdrawPayments() external nonReentrant {\n        uint256 amount = pendingWithdrawals[msg.sender];\n        if (amount == 0) revert NoFunds();\n        pendingWithdrawals[msg.sender] = 0;\n        (bool ok, ) = payable(msg.sender).call{value: amount}(\"\");\n        if (!ok) revert NoFunds();\n    }\n\n    function getLotteryResults(\n        uint256 lotteryId\n    ) external view returns (LotteryResult memory) {\n        return lotteryResults[lotteryId];\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/LotteryManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nerror NoLotteryOwner(string reason);\nerror OnlyGame(string reason);\nerror SimpleError(string reason);\n\ninterface ILotteryManager {\n    struct LotteryStruct {\n        uint256 id;\n        string title;\n        string description;\n        string imageURL;\n        uint256 ticketPrice;\n        uint256 numOfParticipants;\n        uint256 servicePercent;\n        bool drawn;\n        address owner;\n        uint256 createdAt;\n        uint256 expiresAt;\n    }\n    struct ParticipationStruct {\n        address account;\n        string lotteryNumber;\n    }\n    struct LuckyNumber {\n        string number;\n        bool isUsed;\n    }\n\n    function createLottery(\n        string memory title,\n        string memory description,\n        string memory imageURL,\n        uint256 prize,\n        uint256 ticketPrice,\n        uint256 expiresAt\n    ) external;\n\n    function importLuckyNumbers(\n        uint256 id,\n        string[] memory luckyNumbers\n    ) external;\n    function buyTicket(uint256 id, uint256 luckyNumberIndex) external payable;\n    function getAvailableLuckyNumbers(\n        uint256 lotteryId\n    ) external view returns (string[] memory available);\n    function getLotteryParticipantsAddresses(\n        uint256 id\n    ) external view returns (address[] memory);\n    function getLotteryParticipants(\n        uint256 id\n    ) external view returns (ParticipationStruct[] memory);\n    function getJackpot(uint256 lotteryId) external view returns (uint256);\n    function getLottery(\n        uint256 lotteryId\n    ) external view returns (LotteryStruct memory);\n    function getLotteries() external view returns (LotteryStruct[] memory);\n}\n\ninterface ILotteryGame {\n    function drawWinners(\n        uint256 lotteryId,\n        uint256 numberOfWinners\n    ) external payable;\n}\n\ncontract LotteryManager is Ownable, ILotteryManager {\n    ILotteryGame public game;\n    uint256 private _totalLotteries;\n    uint256 private constant MAX_WINNERS = 50;\n    uint256 public platformBalance;\n\n    // mappings\n    mapping(uint256 => LotteryStruct) private lotteries;\n    mapping(uint256 => ParticipationStruct[]) private lotteryParticipants;\n    mapping(uint256 => LuckyNumber[]) private lotteryLuckyNumbers;\n\n    // events (define log schema)\n    event LotteryCreated(uint256 indexed id, address indexed owner);\n    event TicketBought(uint256 indexed id, address indexed owner);\n    event LuckyNumbersImported(uint256 indexed id, uint256 count);\n\n    // using this makes sure that the function is only executable by the owner of the lottery.\n    modifier onlyLotteryOwner(uint256 id) {\n        if (lotteries[id].owner != msg.sender) {\n            revert NoLotteryOwner(\"Only callable by owner!\");\n        }\n        _;\n    }\n\n    modifier onlyGame() {\n        if (address(game) != msg.sender) {\n            revert OnlyGame(\"Only callable by lottery game!\");\n        }\n        _;\n    }\n    constructor() Ownable(msg.sender) {}\n\n    function setGame(address _game) public onlyOwner {\n        game = ILotteryGame(_game);\n    }\n\n    // everyone can create a Lottery\n    function createLottery(\n        string memory title,\n        string memory description,\n        string memory imageURL,\n        uint256 ticketPrice,\n        uint256 servicePercent,\n        uint256 expiresAt\n    ) external {\n        // sanity checks\n        if (bytes(title).length == 0)\n            revert SimpleError(\"Title cannot be empty\");\n        if (ticketPrice == 0)\n            revert SimpleError(\"Ticket Prize must be positive\");\n        if (expiresAt <= block.timestamp)\n            revert SimpleError(\"Expiration must be in future\");\n\n        uint256 lotteryId = _totalLotteries;\n        _totalLotteries += 1;\n\n        // create new lottery\n        LotteryStruct memory newLottery = LotteryStruct({\n            id: lotteryId,\n            title: title,\n            imageURL: imageURL,\n            description: description,\n            ticketPrice: ticketPrice,\n            servicePercent: servicePercent,\n            numOfParticipants: 0,\n            drawn: false,\n            owner: msg.sender,\n            createdAt: block.timestamp,\n            expiresAt: expiresAt\n        });\n\n        // add lottery\n        lotteries[lotteryId] = newLottery;\n        // Fire event\n        emit LotteryCreated(lotteryId, msg.sender);\n    }\n\n    // owner uploads n lucky numbers\n    function importLuckyNumbers(\n        uint256 lotteryId,\n        string[] memory luckyNumbers\n    ) external onlyLotteryOwner(lotteryId) {\n        if (lotteryLuckyNumbers[lotteryId].length != 0)\n            revert SimpleError(\"Already imported\");\n        if (lotteries[lotteryId].numOfParticipants != 0)\n            revert SimpleError(\"Participants already joined\");\n        if (luckyNumbers.length == 0) revert SimpleError(\"Empty list\");\n\n        for (uint256 i = 0; i < luckyNumbers.length; i++) {\n            lotteryLuckyNumbers[lotteryId].push(\n                LuckyNumber({number: luckyNumbers[i], isUsed: false})\n            );\n        }\n        emit LuckyNumbersImported(lotteryId, luckyNumbers.length);\n    }\n\n    // function callable by anyone\n    function buyTicket(\n        uint256 lotteryId,\n        uint256 luckyNumberIndex\n    ) external payable {\n        // reference lottery on chain\n        LotteryStruct storage lottery = lotteries[lotteryId];\n        if (msg.value < lottery.ticketPrice)\n            revert SimpleError(\"Insufficient ETH\");\n        if (block.timestamp > lottery.expiresAt)\n            revert SimpleError(\"Cannot buy Tickets anymore.\");\n        if (lottery.drawn) revert SimpleError(\"Lottery already drawn!\");\n\n        LuckyNumber storage luckyNumber = lotteryLuckyNumbers[lotteryId][\n            luckyNumberIndex\n        ];\n        // use index, because it is more gas friendly than string comparison using hashing\n        if (luckyNumber.isUsed) revert SimpleError(\"Number already used!\");\n\n        lotteryParticipants[lotteryId].push(\n            ParticipationStruct({\n                account: msg.sender,\n                lotteryNumber: luckyNumber.number\n            })\n        );\n\n        lottery.numOfParticipants++;\n        luckyNumber.isUsed = true;\n\n        emit TicketBought(lotteryId, msg.sender);\n    }\n\n    // draw winners\n    function drawWinners(\n        uint256 lotteryId,\n        uint256 numberOfWinners\n    ) external onlyLotteryOwner(lotteryId) {\n        ILotteryManager.LotteryStruct storage lottery = lotteries[lotteryId];\n        if (lottery.drawn) revert SimpleError(\"Lottery already drawn\");\n        //        if(block.timestamp < lottery.expiresAt) revert SimpleError (\"Lottery not expired yet\");\n        if (numberOfWinners < 1)\n            revert SimpleError(\"Must have at least one winner\");\n        if (\n            numberOfWinners > lottery.numOfParticipants ||\n            numberOfWinners > MAX_WINNERS\n        ) revert SimpleError(\"Too many winners\");\n\n        // forward to game\n        uint256 jackpot = lottery.ticketPrice * lottery.numOfParticipants;\n        lottery.drawn = true;\n        game.drawWinners{value: jackpot}(lotteryId, numberOfWinners);\n    }\n\n    function getAvailableLuckyNumbers(\n        uint256 lotteryId\n    ) external view returns (string[] memory available) {\n        LuckyNumber[] storage all = lotteryLuckyNumbers[lotteryId];\n\n        uint256 count = 0;\n        for (uint256 i = 0; i < all.length; i++) {\n            if (!all[i].isUsed) {\n                count++;\n            }\n        }\n\n        available = new string[](count);\n\n        uint256 j = 0;\n        for (uint256 i = 0; i < all.length; i++) {\n            if (!all[i].isUsed) {\n                available[j] = all[i].number;\n                j++;\n            }\n        }\n\n        return available;\n    }\n\n    function getLottery(\n        uint256 lotteryId\n    ) external view returns (LotteryStruct memory) {\n        return lotteries[lotteryId];\n    }\n\n    function getLotteries()\n        external\n        view\n        returns (LotteryStruct[] memory _lotteries)\n    {\n        _lotteries = new LotteryStruct[](_totalLotteries);\n        for (uint256 i = 0; i < _totalLotteries; i++) {\n            _lotteries[i] = _lotteries[i];\n        }\n    }\n\n    // getter for the lottery numOfParticipant\n    function getLotteryParticipantsAddresses(\n        uint256 lotteryId\n    ) external view returns (address[] memory) {\n        address[] memory _participations = new address[](\n            lotteryParticipants[lotteryId].length\n        );\n        for (uint256 i = 0; i < lotteryParticipants[lotteryId].length; ++i) {\n            _participations[i] = lotteryParticipants[lotteryId][i].account;\n        }\n        return _participations;\n    }\n\n    function getLotteryParticipants(\n        uint256 lotteryId\n    ) external view returns (ParticipationStruct[] memory) {\n        ParticipationStruct[]\n            memory _participations = new ParticipationStruct[](\n                lotteryParticipants[lotteryId].length\n            );\n        for (uint256 i = 0; i < lotteryParticipants[lotteryId].length; ++i) {\n            _participations[i] = lotteryParticipants[lotteryId][i];\n        }\n        return _participations;\n    }\n\n    function getJackpot(uint256 lotteryId) external view returns (uint256) {\n        LotteryStruct storage lottery = lotteries[lotteryId];\n        return lottery.ticketPrice * lottery.numOfParticipants;\n    }\n\n    function getLuckyNumbers(\n        uint256 lotteryId\n    ) external view returns (string[] memory luckyNumbers) {\n        luckyNumbers = new string[](lotteryLuckyNumbers[lotteryId].length);\n        for (uint256 i = 0; i < lotteryLuckyNumbers[lotteryId].length; ++i) {\n            luckyNumbers[i] = lotteryLuckyNumbers[lotteryId][i].number;\n        }\n        return luckyNumbers;\n    }\n\n    function getTotalLotteries() external view returns (uint256) {\n        return _totalLotteries;\n    }\n\n    function getBalance() public view returns (uint256) {\n        return address(this).balance;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}