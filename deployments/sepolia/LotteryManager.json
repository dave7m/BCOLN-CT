{
  "address": "0x0e78Be9fc20C12F10a690d0dc22E85B83337F0D4",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "NoLotteryOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "SimpleError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "LotteryCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "LuckyNumbersImported",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "TicketBought",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "luckyNumberIndex",
          "type": "uint256"
        }
      ],
      "name": "buyTicket",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "imageURL",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "ticketPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "servicePercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiresAt",
          "type": "uint256"
        }
      ],
      "name": "createLottery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numberOfWinners",
          "type": "uint256"
        }
      ],
      "name": "drawWinners",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "game",
      "outputs": [
        {
          "internalType": "contract ILotteryGame",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        }
      ],
      "name": "getAvailableLuckyNumbers",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "available",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        }
      ],
      "name": "getJackpot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLotteries",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "imageURL",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "ticketPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numOfParticipants",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "servicePercent",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "drawn",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiresAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILotteryManager.LotteryStruct[]",
          "name": "_lotteries",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        }
      ],
      "name": "getLottery",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "imageURL",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "ticketPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numOfParticipants",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "servicePercent",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "drawn",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiresAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILotteryManager.LotteryStruct",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        }
      ],
      "name": "getLotteryParticipants",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "lotteryNumber",
              "type": "string"
            }
          ],
          "internalType": "struct ILotteryManager.ParticipationStruct[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        }
      ],
      "name": "getLotteryParticipantsAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        }
      ],
      "name": "getLuckyNumbers",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "luckyNumbers",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalLotteries",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        },
        {
          "internalType": "string[]",
          "name": "luckyNumbers",
          "type": "string[]"
        }
      ],
      "name": "importLuckyNumbers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platformBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_game",
          "type": "address"
        }
      ],
      "name": "setGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x152dca654ce39614502afb0e67723daba820c397340563d1cac1f60ebcc667ea",
  "receipt": {
    "to": null,
    "from": "0x7aF6043b8016a82bb24EfD32b13E34bD3BBC9A86",
    "contractAddress": "0x0e78Be9fc20C12F10a690d0dc22E85B83337F0D4",
    "transactionIndex": 113,
    "gasUsed": "1765969",
    "logsBloom": "0x
    "blockHash": "0x3d73147066468d400bfeac63a49a0612c7a29b92ae11ca5282d89edf66ad2d6d",
    "transactionHash": "0x152dca654ce39614502afb0e67723daba820c397340563d1cac1f60ebcc667ea",
    "logs": [
      {
        "transactionIndex": 113,
        "blockNumber": 8312111,
        "transactionHash": "0x152dca654ce39614502afb0e67723daba820c397340563d1cac1f60ebcc667ea",
        "address": "0x0e78Be9fc20C12F10a690d0dc22E85B83337F0D4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007af6043b8016a82bb24efd32b13e34bd3bbc9a86"
        ],
        "data": "0x",
        "logIndex": 250,
        "blockHash": "0x3d73147066468d400bfeac63a49a0612c7a29b92ae11ca5282d89edf66ad2d6d"
      }
    ],
    "blockNumber": 8312111,
    "cumulativeGasUsed": "16590528",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "30d16a61e712d746a67459587ec3c887",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"NoLotteryOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"SimpleError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LotteryCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"LuckyNumbersImported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"TicketBought\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"luckyNumberIndex\",\"type\":\"uint256\"}],\"name\":\"buyTicket\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageURL\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"servicePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"name\":\"createLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfWinners\",\"type\":\"uint256\"}],\"name\":\"drawWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"game\",\"outputs\":[{\"internalType\":\"contract ILotteryGame\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"}],\"name\":\"getAvailableLuckyNumbers\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"available\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"}],\"name\":\"getJackpot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteries\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageURL\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numOfParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"servicePercent\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"drawn\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"internalType\":\"struct ILotteryManager.LotteryStruct[]\",\"name\":\"_lotteries\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"}],\"name\":\"getLottery\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageURL\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numOfParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"servicePercent\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"drawn\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"internalType\":\"struct ILotteryManager.LotteryStruct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"}],\"name\":\"getLotteryParticipants\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"lotteryNumber\",\"type\":\"string\"}],\"internalType\":\"struct ILotteryManager.ParticipationStruct[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"}],\"name\":\"getLotteryParticipantsAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"}],\"name\":\"getLuckyNumbers\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"luckyNumbers\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalLotteries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"luckyNumbers\",\"type\":\"string[]\"}],\"name\":\"importLuckyNumbers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_game\",\"type\":\"address\"}],\"name\":\"setGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LotteryManager.sol\":\"LotteryManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/LotteryManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nerror NoLotteryOwner(string reason);\\nerror OnlyGame(string reason);\\nerror SimpleError(string reason);\\n\\ninterface ILotteryManager {\\n    struct LotteryStruct {\\n        uint256 id;\\n        string title;\\n        string description;\\n        string imageURL;\\n        uint256 ticketPrice;\\n        uint256 numOfParticipants;\\n        uint256 servicePercent;\\n        bool drawn;\\n        address owner;\\n        uint256 createdAt;\\n        uint256 expiresAt;\\n    }\\n    struct ParticipationStruct {\\n        address account;\\n        string lotteryNumber;\\n    }\\n    struct LuckyNumber {\\n        string number;\\n        bool isUsed;\\n    }\\n\\n    function createLottery(\\n        string memory title,\\n        string memory description,\\n        string memory imageURL,\\n        uint256 prize,\\n        uint256 ticketPrice,\\n        uint256 expiresAt\\n    ) external;\\n\\n    function importLuckyNumbers(\\n        uint256 id,\\n        string[] memory luckyNumbers\\n    ) external;\\n    function buyTicket(uint256 id, uint256 luckyNumberIndex) external payable;\\n    function getAvailableLuckyNumbers(\\n        uint256 lotteryId\\n    ) external view returns (string[] memory available);\\n    function getLotteryParticipantsAddresses(\\n        uint256 id\\n    ) external view returns (address[] memory);\\n    function getLotteryParticipants(\\n        uint256 id\\n    ) external view returns (ParticipationStruct[] memory);\\n    function getJackpot(uint256 lotteryId) external view returns (uint256);\\n    function getLottery(\\n        uint256 lotteryId\\n    ) external view returns (LotteryStruct memory);\\n    function getLotteries() external view returns (LotteryStruct[] memory);\\n}\\n\\ninterface ILotteryGame {\\n    function drawWinners(\\n        uint256 lotteryId,\\n        uint256 numberOfWinners\\n    ) external payable;\\n}\\n\\ncontract LotteryManager is Ownable, ILotteryManager {\\n    ILotteryGame public game;\\n    uint256 private _totalLotteries;\\n    uint256 private constant MAX_WINNERS = 50;\\n    uint256 public platformBalance;\\n\\n    // mappings\\n    mapping(uint256 => LotteryStruct) private lotteries;\\n    mapping(uint256 => ParticipationStruct[]) private lotteryParticipants;\\n    mapping(uint256 => LuckyNumber[]) private lotteryLuckyNumbers;\\n\\n    // events (define log schema)\\n    event LotteryCreated(uint256 indexed id, address indexed owner);\\n    event TicketBought(uint256 indexed id, address indexed owner);\\n    event LuckyNumbersImported(uint256 indexed id, uint256 count);\\n\\n    // using this makes sure that the function is only executable by the owner of the lottery.\\n    modifier onlyLotteryOwner(uint256 id) {\\n        if (lotteries[id].owner != msg.sender) {\\n            revert NoLotteryOwner(\\\"Only callable by owner!\\\");\\n        }\\n        _;\\n    }\\n\\n    modifier onlyGame() {\\n        if (address(game) != msg.sender) {\\n            revert OnlyGame(\\\"Only callable by lottery game!\\\");\\n        }\\n        _;\\n    }\\n    constructor() Ownable(msg.sender) {}\\n\\n    function setGame(address _game) public onlyOwner {\\n        game = ILotteryGame(_game);\\n    }\\n\\n    // everyone can create a Lottery\\n    function createLottery(\\n        string memory title,\\n        string memory description,\\n        string memory imageURL,\\n        uint256 ticketPrice,\\n        uint256 servicePercent,\\n        uint256 expiresAt\\n    ) external {\\n        // sanity checks\\n        if (bytes(title).length == 0)\\n            revert SimpleError(\\\"Title cannot be empty\\\");\\n        if (ticketPrice == 0)\\n            revert SimpleError(\\\"Ticket Prize must be positive\\\");\\n        if (expiresAt <= block.timestamp)\\n            revert SimpleError(\\\"Expiration must be in future\\\");\\n\\n        uint256 lotteryId = _totalLotteries;\\n        _totalLotteries += 1;\\n\\n        // create new lottery\\n        LotteryStruct memory newLottery = LotteryStruct({\\n            id: lotteryId,\\n            title: title,\\n            imageURL: imageURL,\\n            description: description,\\n            ticketPrice: ticketPrice,\\n            servicePercent: servicePercent,\\n            numOfParticipants: 0,\\n            drawn: false,\\n            owner: msg.sender,\\n            createdAt: block.timestamp,\\n            expiresAt: expiresAt\\n        });\\n\\n        // add lottery\\n        lotteries[lotteryId] = newLottery;\\n        // Fire event\\n        emit LotteryCreated(lotteryId, msg.sender);\\n    }\\n\\n    // owner uploads n lucky numbers\\n    function importLuckyNumbers(\\n        uint256 lotteryId,\\n        string[] memory luckyNumbers\\n    ) external onlyLotteryOwner(lotteryId) {\\n        if (lotteryLuckyNumbers[lotteryId].length != 0)\\n            revert SimpleError(\\\"Already imported\\\");\\n        if (lotteries[lotteryId].numOfParticipants != 0)\\n            revert SimpleError(\\\"Participants already joined\\\");\\n        if (luckyNumbers.length == 0) revert SimpleError(\\\"Empty list\\\");\\n\\n        for (uint256 i = 0; i < luckyNumbers.length; i++) {\\n            lotteryLuckyNumbers[lotteryId].push(\\n                LuckyNumber({number: luckyNumbers[i], isUsed: false})\\n            );\\n        }\\n        emit LuckyNumbersImported(lotteryId, luckyNumbers.length);\\n    }\\n\\n    // function callable by anyone\\n    function buyTicket(\\n        uint256 lotteryId,\\n        uint256 luckyNumberIndex\\n    ) external payable {\\n        // reference lottery on chain\\n        LotteryStruct storage lottery = lotteries[lotteryId];\\n        if (msg.value < lottery.ticketPrice)\\n            revert SimpleError(\\\"Insufficient ETH\\\");\\n        if (block.timestamp > lottery.expiresAt)\\n            revert SimpleError(\\\"Cannot buy Tickets anymore.\\\");\\n        if (lottery.drawn) revert SimpleError(\\\"Lottery already drawn!\\\");\\n\\n        LuckyNumber storage luckyNumber = lotteryLuckyNumbers[lotteryId][\\n            luckyNumberIndex\\n        ];\\n        // use index, because it is more gas friendly than string comparison using hashing\\n        if (luckyNumber.isUsed) revert SimpleError(\\\"Number already used!\\\");\\n\\n        lotteryParticipants[lotteryId].push(\\n            ParticipationStruct({\\n                account: msg.sender,\\n                lotteryNumber: luckyNumber.number\\n            })\\n        );\\n\\n        lottery.numOfParticipants++;\\n        luckyNumber.isUsed = true;\\n\\n        emit TicketBought(lotteryId, msg.sender);\\n    }\\n\\n    // draw winners\\n    function drawWinners(\\n        uint256 lotteryId,\\n        uint256 numberOfWinners\\n    ) external onlyLotteryOwner(lotteryId) {\\n        ILotteryManager.LotteryStruct storage lottery = lotteries[lotteryId];\\n        if (lottery.drawn) revert SimpleError(\\\"Lottery already drawn\\\");\\n        //        if(block.timestamp < lottery.expiresAt) revert SimpleError (\\\"Lottery not expired yet\\\");\\n        if (numberOfWinners < 1)\\n            revert SimpleError(\\\"Must have at least one winner\\\");\\n        if (\\n            numberOfWinners > lottery.numOfParticipants ||\\n            numberOfWinners > MAX_WINNERS\\n        ) revert SimpleError(\\\"Too many winners\\\");\\n\\n        // forward to game\\n        uint256 jackpot = lottery.ticketPrice * lottery.numOfParticipants;\\n        lottery.drawn = true;\\n        game.drawWinners{value: jackpot}(lotteryId, numberOfWinners);\\n    }\\n\\n    function getAvailableLuckyNumbers(\\n        uint256 lotteryId\\n    ) external view returns (string[] memory available) {\\n        LuckyNumber[] storage all = lotteryLuckyNumbers[lotteryId];\\n\\n        uint256 count = 0;\\n        for (uint256 i = 0; i < all.length; i++) {\\n            if (!all[i].isUsed) {\\n                count++;\\n            }\\n        }\\n\\n        available = new string[](count);\\n\\n        uint256 j = 0;\\n        for (uint256 i = 0; i < all.length; i++) {\\n            if (!all[i].isUsed) {\\n                available[j] = all[i].number;\\n                j++;\\n            }\\n        }\\n\\n        return available;\\n    }\\n\\n    function getLottery(\\n        uint256 lotteryId\\n    ) external view returns (LotteryStruct memory) {\\n        return lotteries[lotteryId];\\n    }\\n\\n    function getLotteries()\\n        external\\n        view\\n        returns (LotteryStruct[] memory _lotteries)\\n    {\\n        _lotteries = new LotteryStruct[](_totalLotteries);\\n        for (uint256 i = 0; i < _totalLotteries; i++) {\\n            _lotteries[i] = _lotteries[i];\\n        }\\n    }\\n\\n    // getter for the lottery numOfParticipant\\n    function getLotteryParticipantsAddresses(\\n        uint256 lotteryId\\n    ) external view returns (address[] memory) {\\n        address[] memory _participations = new address[](\\n            lotteryParticipants[lotteryId].length\\n        );\\n        for (uint256 i = 0; i < lotteryParticipants[lotteryId].length; ++i) {\\n            _participations[i] = lotteryParticipants[lotteryId][i].account;\\n        }\\n        return _participations;\\n    }\\n\\n    function getLotteryParticipants(\\n        uint256 lotteryId\\n    ) external view returns (ParticipationStruct[] memory) {\\n        ParticipationStruct[]\\n            memory _participations = new ParticipationStruct[](\\n                lotteryParticipants[lotteryId].length\\n            );\\n        for (uint256 i = 0; i < lotteryParticipants[lotteryId].length; ++i) {\\n            _participations[i] = lotteryParticipants[lotteryId][i];\\n        }\\n        return _participations;\\n    }\\n\\n    function getJackpot(uint256 lotteryId) external view returns (uint256) {\\n        LotteryStruct storage lottery = lotteries[lotteryId];\\n        return lottery.ticketPrice * lottery.numOfParticipants;\\n    }\\n\\n    function getLuckyNumbers(\\n        uint256 lotteryId\\n    ) external view returns (string[] memory luckyNumbers) {\\n        luckyNumbers = new string[](lotteryLuckyNumbers[lotteryId].length);\\n        for (uint256 i = 0; i < lotteryLuckyNumbers[lotteryId].length; ++i) {\\n            luckyNumbers[i] = lotteryLuckyNumbers[lotteryId][i].number;\\n        }\\n        return luckyNumbers;\\n    }\\n\\n    function getTotalLotteries() external view returns (uint256) {\\n        return _totalLotteries;\\n    }\\n\\n    function getBalance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n}\\n\",\"keccak256\":\"0x34fe2035229a103fb05d323b7d8b6815f23b8de58e2ac005232a24d8938e7249\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50338061003757604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61004081610046565b50610096565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611e82806100a56000396000f3fe6080604052600436106101145760003560e01c8063715018a6116100a0578063ad19c83911610064578063ad19c83914610301578063bcc82ec414610321578063c3fe3e2814610343578063db0cdf1814610363578063f2fde38b1461037857600080fd5b8063715018a61461024d578063819912a2146102625780638da5cb5b1461028257806392e845f6146102b4578063a69f269c146102e157600080fd5b80634ce4f927116100e75780634ce4f9271461019d57806362074fbf146101bd57806362a5dbbc146101dd578063643010b3146101f357806368fb2eba1461022057600080fd5b806312065fe014610119578063298ec2081461013b57806335ea2063146101505780634870eb6914610170575b600080fd5b34801561012557600080fd5b50475b6040519081526020015b60405180910390f35b61014e610149366004611771565b610398565b005b34801561015c57600080fd5b5061014e61016b36600461184a565b610683565b34801561017c57600080fd5b5061019061018b366004611919565b6108c0565b6040516101329190611932565b3480156101a957600080fd5b506101286101b8366004611919565b6109b0565b3480156101c957600080fd5b5061014e6101d8366004611771565b6109db565b3480156101e957600080fd5b5061012860035481565b3480156101ff57600080fd5b5061021361020e366004611919565b610bdc565b60405161013291906119c5565b34801561022c57600080fd5b5061024061023b366004611919565b610dc2565b6040516101329190611a27565b34801561025957600080fd5b5061014e610f5e565b34801561026e57600080fd5b5061014e61027d366004611aa4565b610f72565b34801561028e57600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610132565b3480156102c057600080fd5b506102d46102cf366004611919565b610f9c565b6040516101329190611b88565b3480156102ed57600080fd5b506102136102fc366004611919565b6111df565b34801561030d57600080fd5b5061014e61031c366004611b9b565b611346565b34801561032d57600080fd5b5061033661159d565b6040516101329190611c3f565b34801561034f57600080fd5b5060015461029c906001600160a01b031681565b34801561036f57600080fd5b50600254610128565b34801561038457600080fd5b5061014e610393366004611aa4565b611651565b6000828152600460208190526040909120908101543410156103f557604051631f200c7360e31b815260206004820152601060248201526f092dce6eaccccd2c6d2cadce8408aa8960831b60448201526064015b60405180910390fd5b806009015442111561044a57604051631f200c7360e31b815260206004820152601b60248201527f43616e6e6f7420627579205469636b65747320616e796d6f72652e000000000060448201526064016103ec565b600781015460ff161561049957604051631f200c7360e31b81526020600482015260166024820152754c6f747465727920616c726561647920647261776e2160501b60448201526064016103ec565b60008381526006602052604081208054849081106104b9576104b9611c94565b60009182526020909120600290910201600181015490915060ff161561051957604051631f200c7360e31b81526020600482015260146024820152734e756d62657220616c726561647920757365642160601b60448201526064016103ec565b600560008581526020019081526020016000206040518060400160405280336001600160a01b0316815260200183600001805461055590611caa565b80601f016020809104026020016040519081016040528092919081815260200182805461058190611caa565b80156105ce5780601f106105a3576101008083540402835291602001916105ce565b820191906000526020600020905b8154815290600101906020018083116105b157829003601f168201915b5050509190925250508154600180820184556000938452602093849020835160029093020180546001600160a01b0319166001600160a01b039093169290921782559282015191929091908201906106269082611d2d565b50505060058201805490600061063b83611e03565b90915550506001818101805460ff19169091179055604051339085907f6606e4c8a88792ed4fd5159f9be235ca78e87fc1cbdc6158ea92d3ed3be9bf7290600090a350505050565b600082815260046020526040902060070154829061010090046001600160a01b031633146106ee576040516305eb3a9760e31b81526020600482015260176024820152764f6e6c792063616c6c61626c65206279206f776e65722160481b60448201526064016103ec565b6000838152600660205260409020541561073e57604051631f200c7360e31b815260206004820152601060248201526f105b1c9958591e481a5b5c1bdc9d195960821b60448201526064016103ec565b6000838152600460205260409020600501541561079e57604051631f200c7360e31b815260206004820152601b60248201527f5061727469636970616e747320616c7265616479206a6f696e6564000000000060448201526064016103ec565b81516000036107dd57604051631f200c7360e31b815260206004820152600a602482015269115b5c1d1e481b1a5cdd60b21b60448201526064016103ec565b60005b825181101561087f5760066000858152602001908152602001600020604051806040016040528085848151811061081957610819611c94565b602090810291909101810151825260009181018290528354600181018555938252902081519192600202019081906108519082611d2d565b50602091909101516001909101805460ff19169115159190911790558061087781611e03565b9150506107e0565b50827fb22ffe18b1f94c49627736e7789522d5019e87ba72db94008f048f8019b93be383516040516108b391815260200190565b60405180910390a2505050565b6000818152600560205260408120546060919067ffffffffffffffff8111156108eb576108eb611793565b604051908082528060200260200182016040528015610914578160200160208202803683370190505b50905060005b6000848152600560205260409020548110156109a957600084815260056020526040902080548290811061095057610950611c94565b600091825260209091206002909102015482516001600160a01b039091169083908390811061098157610981611c94565b6001600160a01b03909216602092830291909101909101526109a281611e03565b905061091a565b5092915050565b6000818152600460208190526040822060058101549181015490916109d491611e1c565b9392505050565b600082815260046020526040902060070154829061010090046001600160a01b03163314610a46576040516305eb3a9760e31b81526020600482015260176024820152764f6e6c792063616c6c61626c65206279206f776e65722160481b60448201526064016103ec565b6000838152600460205260409020600781015460ff1615610aa257604051631f200c7360e31b81526020600482015260156024820152742637ba3a32b93c9030b63932b0b23c90323930bbb760591b60448201526064016103ec565b6001831015610af457604051631f200c7360e31b815260206004820152601d60248201527f4d7573742068617665206174206c65617374206f6e652077696e6e657200000060448201526064016103ec565b8060050154831180610b065750603283115b15610b4757604051631f200c7360e31b815260206004820152601060248201526f546f6f206d616e792077696e6e65727360801b60448201526064016103ec565b600081600501548260040154610b5d9190611e1c565b60078301805460ff19166001908117909155546040516362074fbf60e01b815260048101889052602481018790529192506001600160a01b0316906362074fbf9083906044016000604051808303818588803b158015610bbc57600080fd5b505af1158015610bd0573d6000803e3d6000fd5b50505050505050505050565b6000818152600660205260408120606091805b8254811015610c4557828181548110610c0a57610c0a611c94565b600091825260209091206001600290920201015460ff16610c335781610c2f81611e03565b9250505b80610c3d81611e03565b915050610bef565b508067ffffffffffffffff811115610c5f57610c5f611793565b604051908082528060200260200182016040528015610c9257816020015b6060815260200190600190039081610c7d5790505b5092506000805b8354811015610db957838181548110610cb457610cb4611c94565b600091825260209091206001600290920201015460ff16610da757838181548110610ce157610ce1611c94565b90600052602060002090600202016000018054610cfd90611caa565b80601f0160208091040260200160405190810160405280929190818152602001828054610d2990611caa565b8015610d765780601f10610d4b57610100808354040283529160200191610d76565b820191906000526020600020905b815481529060010190602001808311610d5957829003601f168201915b5050505050858381518110610d8d57610d8d611c94565b60200260200101819052508180610da390611e03565b9250505b80610db181611e03565b915050610c99565b50505050919050565b6000818152600560205260408120546060919067ffffffffffffffff811115610ded57610ded611793565b604051908082528060200260200182016040528015610e3357816020015b604080518082019091526000815260606020820152815260200190600190039081610e0b5790505b50905060005b6000848152600560205260409020548110156109a9576000848152600560205260409020805482908110610e6f57610e6f611c94565b60009182526020918290206040805180820190915260029092020180546001600160a01b031682526001810180549293919291840191610eae90611caa565b80601f0160208091040260200160405190810160405280929190818152602001828054610eda90611caa565b8015610f275780601f10610efc57610100808354040283529160200191610f27565b820191906000526020600020905b815481529060010190602001808311610f0a57829003601f168201915b505050505081525050828281518110610f4257610f42611c94565b602002602001018190525080610f5790611e03565b9050610e39565b610f6661168f565b610f7060006116bc565b565b610f7a61168f565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b610fa461170c565b600460008381526020019081526020016000206040518061016001604052908160008201548152602001600182018054610fdd90611caa565b80601f016020809104026020016040519081016040528092919081815260200182805461100990611caa565b80156110565780601f1061102b57610100808354040283529160200191611056565b820191906000526020600020905b81548152906001019060200180831161103957829003601f168201915b5050505050815260200160028201805461106f90611caa565b80601f016020809104026020016040519081016040528092919081815260200182805461109b90611caa565b80156110e85780601f106110bd576101008083540402835291602001916110e8565b820191906000526020600020905b8154815290600101906020018083116110cb57829003601f168201915b5050505050815260200160038201805461110190611caa565b80601f016020809104026020016040519081016040528092919081815260200182805461112d90611caa565b801561117a5780601f1061114f5761010080835404028352916020019161117a565b820191906000526020600020905b81548152906001019060200180831161115d57829003601f168201915b5050509183525050600482015460208201526005820154604082015260068201546060820152600782015460ff81161515608083015261010090046001600160a01b031660a0820152600882015460c082015260099091015460e09091015292915050565b60008181526006602052604090205460609067ffffffffffffffff81111561120957611209611793565b60405190808252806020026020018201604052801561123c57816020015b60608152602001906001900390816112275790505b50905060005b60008381526006602052604090205481101561134057600083815260066020526040902080548290811061127857611278611c94565b9060005260206000209060020201600001805461129490611caa565b80601f01602080910402602001604051908101604052809291908181526020018280546112c090611caa565b801561130d5780601f106112e25761010080835404028352916020019161130d565b820191906000526020600020905b8154815290600101906020018083116112f057829003601f168201915b505050505082828151811061132457611324611c94565b60200260200101819052508061133990611e03565b9050611242565b50919050565b855160000361139057604051631f200c7360e31b81526020600482015260156024820152745469746c652063616e6e6f7420626520656d70747960581b60448201526064016103ec565b826000036113e157604051631f200c7360e31b815260206004820152601d60248201527f5469636b6574205072697a65206d75737420626520706f73697469766500000060448201526064016103ec565b42811161143157604051631f200c7360e31b815260206004820152601c60248201527f45787069726174696f6e206d75737420626520696e206675747572650000000060448201526064016103ec565b600280549060019060006114458385611e39565b9091555050604080516101608101825282815260208082018a81528284018a90526060830189905260808301889052600060a0840181905260c0840188905260e084018190523361010085015242610120850152610140840187905285815260049092529290208151815591519091829160018201906114c59082611d2d565b50604082015160028201906114da9082611d2d565b50606082015160038201906114ef9082611d2d565b506080820151600482015560a0820151600582015560c0820151600682015560e0820151600782018054610100808601516001600160a01b031602610100600160a81b0319931515939093166001600160a81b031990911617919091179055610120820151600882015561014090910151600990910155604051339083907f73ac9939c0fae9d35f1ff5450b52cb43bf0601ae6cc29f9d7eb5967b91e7505990600090a35050505050505050565b606060025467ffffffffffffffff8111156115ba576115ba611793565b6040519080825280602002602001820160405280156115f357816020015b6115e061170c565b8152602001906001900390816115d85790505b50905060005b60025481101561164d5781818151811061161557611615611c94565b602002602001015182828151811061162f5761162f611c94565b6020026020010181905250808061164590611e03565b9150506115f9565b5090565b61165961168f565b6001600160a01b03811661168357604051631e4fbdf760e01b8152600060048201526024016103ec565b61168c816116bc565b50565b6000546001600160a01b03163314610f705760405163118cdaa760e01b81523360048201526024016103ec565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040518061016001604052806000815260200160608152602001606081526020016060815260200160008152602001600081526020016000815260200160001515815260200160006001600160a01b0316815260200160008152602001600081525090565b6000806040838503121561178457600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156117d2576117d2611793565b604052919050565b600082601f8301126117eb57600080fd5b813567ffffffffffffffff81111561180557611805611793565b611818601f8201601f19166020016117a9565b81815284602083860101111561182d57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561185d57600080fd5b8235915060208084013567ffffffffffffffff8082111561187d57600080fd5b818601915086601f83011261189157600080fd5b8135818111156118a3576118a3611793565b8060051b6118b28582016117a9565b918252838101850191858101908a8411156118cc57600080fd5b86860192505b83831015611908578235858111156118ea5760008081fd5b6118f88c89838a01016117da565b83525091860191908601906118d2565b809750505050505050509250929050565b60006020828403121561192b57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156119735783516001600160a01b03168352928401929184019160010161194e565b50909695505050505050565b6000815180845260005b818110156119a557602081850181015186830182015201611989565b506000602082860101526020601f19601f83011685010191505092915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611a1a57603f19888603018452611a0885835161197f565b945092850192908501906001016119ec565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015611a9657888303603f19018552815180516001600160a01b03168452870151878401879052611a838785018261197f565b9588019593505090860190600101611a4e565b509098975050505050505050565b600060208284031215611ab657600080fd5b81356001600160a01b03811681146109d457600080fd5b6000610160825184526020830151816020860152611aed8286018261197f565b91505060408301518482036040860152611b07828261197f565b91505060608301518482036060860152611b21828261197f565b9150506080830151608085015260a083015160a085015260c083015160c085015260e0830151611b5560e086018215159052565b50610100838101516001600160a01b03169085015261012080840151908501526101409283015192909301919091525090565b6020815260006109d46020830184611acd565b60008060008060008060c08789031215611bb457600080fd5b863567ffffffffffffffff80821115611bcc57600080fd5b611bd88a838b016117da565b97506020890135915080821115611bee57600080fd5b611bfa8a838b016117da565b96506040890135915080821115611c1057600080fd5b50611c1d89828a016117da565b945050606087013592506080870135915060a087013590509295509295509295565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611a1a57603f19888603018452611c82858351611acd565b94509285019290850190600101611c66565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680611cbe57607f821691505b60208210810361134057634e487b7160e01b600052602260045260246000fd5b601f821115611d2857600081815260208120601f850160051c81016020861015611d055750805b601f850160051c820191505b81811015611d2457828155600101611d11565b5050505b505050565b815167ffffffffffffffff811115611d4757611d47611793565b611d5b81611d558454611caa565b84611cde565b602080601f831160018114611d905760008415611d785750858301515b600019600386901b1c1916600185901b178555611d24565b600085815260208120601f198616915b82811015611dbf57888601518255948401946001909101908401611da0565b5085821015611ddd5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b600060018201611e1557611e15611ded565b5060010190565b8082028115828204841417611e3357611e33611ded565b92915050565b80820180821115611e3357611e33611ded56fea2646970667358221220f22794293d11710a78ea5da4abdad66c9e5e27b26e9986aa0c1b6eca7933ae1664736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106101145760003560e01c8063715018a6116100a0578063ad19c83911610064578063ad19c83914610301578063bcc82ec414610321578063c3fe3e2814610343578063db0cdf1814610363578063f2fde38b1461037857600080fd5b8063715018a61461024d578063819912a2146102625780638da5cb5b1461028257806392e845f6146102b4578063a69f269c146102e157600080fd5b80634ce4f927116100e75780634ce4f9271461019d57806362074fbf146101bd57806362a5dbbc146101dd578063643010b3146101f357806368fb2eba1461022057600080fd5b806312065fe014610119578063298ec2081461013b57806335ea2063146101505780634870eb6914610170575b600080fd5b34801561012557600080fd5b50475b6040519081526020015b60405180910390f35b61014e610149366004611771565b610398565b005b34801561015c57600080fd5b5061014e61016b36600461184a565b610683565b34801561017c57600080fd5b5061019061018b366004611919565b6108c0565b6040516101329190611932565b3480156101a957600080fd5b506101286101b8366004611919565b6109b0565b3480156101c957600080fd5b5061014e6101d8366004611771565b6109db565b3480156101e957600080fd5b5061012860035481565b3480156101ff57600080fd5b5061021361020e366004611919565b610bdc565b60405161013291906119c5565b34801561022c57600080fd5b5061024061023b366004611919565b610dc2565b6040516101329190611a27565b34801561025957600080fd5b5061014e610f5e565b34801561026e57600080fd5b5061014e61027d366004611aa4565b610f72565b34801561028e57600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610132565b3480156102c057600080fd5b506102d46102cf366004611919565b610f9c565b6040516101329190611b88565b3480156102ed57600080fd5b506102136102fc366004611919565b6111df565b34801561030d57600080fd5b5061014e61031c366004611b9b565b611346565b34801561032d57600080fd5b5061033661159d565b6040516101329190611c3f565b34801561034f57600080fd5b5060015461029c906001600160a01b031681565b34801561036f57600080fd5b50600254610128565b34801561038457600080fd5b5061014e610393366004611aa4565b611651565b6000828152600460208190526040909120908101543410156103f557604051631f200c7360e31b815260206004820152601060248201526f092dce6eaccccd2c6d2cadce8408aa8960831b60448201526064015b60405180910390fd5b806009015442111561044a57604051631f200c7360e31b815260206004820152601b60248201527f43616e6e6f7420627579205469636b65747320616e796d6f72652e000000000060448201526064016103ec565b600781015460ff161561049957604051631f200c7360e31b81526020600482015260166024820152754c6f747465727920616c726561647920647261776e2160501b60448201526064016103ec565b60008381526006602052604081208054849081106104b9576104b9611c94565b60009182526020909120600290910201600181015490915060ff161561051957604051631f200c7360e31b81526020600482015260146024820152734e756d62657220616c726561647920757365642160601b60448201526064016103ec565b600560008581526020019081526020016000206040518060400160405280336001600160a01b0316815260200183600001805461055590611caa565b80601f016020809104026020016040519081016040528092919081815260200182805461058190611caa565b80156105ce5780601f106105a3576101008083540402835291602001916105ce565b820191906000526020600020905b8154815290600101906020018083116105b157829003601f168201915b5050509190925250508154600180820184556000938452602093849020835160029093020180546001600160a01b0319166001600160a01b039093169290921782559282015191929091908201906106269082611d2d565b50505060058201805490600061063b83611e03565b90915550506001818101805460ff19169091179055604051339085907f6606e4c8a88792ed4fd5159f9be235ca78e87fc1cbdc6158ea92d3ed3be9bf7290600090a350505050565b600082815260046020526040902060070154829061010090046001600160a01b031633146106ee576040516305eb3a9760e31b81526020600482015260176024820152764f6e6c792063616c6c61626c65206279206f776e65722160481b60448201526064016103ec565b6000838152600660205260409020541561073e57604051631f200c7360e31b815260206004820152601060248201526f105b1c9958591e481a5b5c1bdc9d195960821b60448201526064016103ec565b6000838152600460205260409020600501541561079e57604051631f200c7360e31b815260206004820152601b60248201527f5061727469636970616e747320616c7265616479206a6f696e6564000000000060448201526064016103ec565b81516000036107dd57604051631f200c7360e31b815260206004820152600a602482015269115b5c1d1e481b1a5cdd60b21b60448201526064016103ec565b60005b825181101561087f5760066000858152602001908152602001600020604051806040016040528085848151811061081957610819611c94565b602090810291909101810151825260009181018290528354600181018555938252902081519192600202019081906108519082611d2d565b50602091909101516001909101805460ff19169115159190911790558061087781611e03565b9150506107e0565b50827fb22ffe18b1f94c49627736e7789522d5019e87ba72db94008f048f8019b93be383516040516108b391815260200190565b60405180910390a2505050565b6000818152600560205260408120546060919067ffffffffffffffff8111156108eb576108eb611793565b604051908082528060200260200182016040528015610914578160200160208202803683370190505b50905060005b6000848152600560205260409020548110156109a957600084815260056020526040902080548290811061095057610950611c94565b600091825260209091206002909102015482516001600160a01b039091169083908390811061098157610981611c94565b6001600160a01b03909216602092830291909101909101526109a281611e03565b905061091a565b5092915050565b6000818152600460208190526040822060058101549181015490916109d491611e1c565b9392505050565b600082815260046020526040902060070154829061010090046001600160a01b03163314610a46576040516305eb3a9760e31b81526020600482015260176024820152764f6e6c792063616c6c61626c65206279206f776e65722160481b60448201526064016103ec565b6000838152600460205260409020600781015460ff1615610aa257604051631f200c7360e31b81526020600482015260156024820152742637ba3a32b93c9030b63932b0b23c90323930bbb760591b60448201526064016103ec565b6001831015610af457604051631f200c7360e31b815260206004820152601d60248201527f4d7573742068617665206174206c65617374206f6e652077696e6e657200000060448201526064016103ec565b8060050154831180610b065750603283115b15610b4757604051631f200c7360e31b815260206004820152601060248201526f546f6f206d616e792077696e6e65727360801b60448201526064016103ec565b600081600501548260040154610b5d9190611e1c565b60078301805460ff19166001908117909155546040516362074fbf60e01b815260048101889052602481018790529192506001600160a01b0316906362074fbf9083906044016000604051808303818588803b158015610bbc57600080fd5b505af1158015610bd0573d6000803e3d6000fd5b50505050505050505050565b6000818152600660205260408120606091805b8254811015610c4557828181548110610c0a57610c0a611c94565b600091825260209091206001600290920201015460ff16610c335781610c2f81611e03565b9250505b80610c3d81611e03565b915050610bef565b508067ffffffffffffffff811115610c5f57610c5f611793565b604051908082528060200260200182016040528015610c9257816020015b6060815260200190600190039081610c7d5790505b5092506000805b8354811015610db957838181548110610cb457610cb4611c94565b600091825260209091206001600290920201015460ff16610da757838181548110610ce157610ce1611c94565b90600052602060002090600202016000018054610cfd90611caa565b80601f0160208091040260200160405190810160405280929190818152602001828054610d2990611caa565b8015610d765780601f10610d4b57610100808354040283529160200191610d76565b820191906000526020600020905b815481529060010190602001808311610d5957829003601f168201915b5050505050858381518110610d8d57610d8d611c94565b60200260200101819052508180610da390611e03565b9250505b80610db181611e03565b915050610c99565b50505050919050565b6000818152600560205260408120546060919067ffffffffffffffff811115610ded57610ded611793565b604051908082528060200260200182016040528015610e3357816020015b604080518082019091526000815260606020820152815260200190600190039081610e0b5790505b50905060005b6000848152600560205260409020548110156109a9576000848152600560205260409020805482908110610e6f57610e6f611c94565b60009182526020918290206040805180820190915260029092020180546001600160a01b031682526001810180549293919291840191610eae90611caa565b80601f0160208091040260200160405190810160405280929190818152602001828054610eda90611caa565b8015610f275780601f10610efc57610100808354040283529160200191610f27565b820191906000526020600020905b815481529060010190602001808311610f0a57829003601f168201915b505050505081525050828281518110610f4257610f42611c94565b602002602001018190525080610f5790611e03565b9050610e39565b610f6661168f565b610f7060006116bc565b565b610f7a61168f565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b610fa461170c565b600460008381526020019081526020016000206040518061016001604052908160008201548152602001600182018054610fdd90611caa565b80601f016020809104026020016040519081016040528092919081815260200182805461100990611caa565b80156110565780601f1061102b57610100808354040283529160200191611056565b820191906000526020600020905b81548152906001019060200180831161103957829003601f168201915b5050505050815260200160028201805461106f90611caa565b80601f016020809104026020016040519081016040528092919081815260200182805461109b90611caa565b80156110e85780601f106110bd576101008083540402835291602001916110e8565b820191906000526020600020905b8154815290600101906020018083116110cb57829003601f168201915b5050505050815260200160038201805461110190611caa565b80601f016020809104026020016040519081016040528092919081815260200182805461112d90611caa565b801561117a5780601f1061114f5761010080835404028352916020019161117a565b820191906000526020600020905b81548152906001019060200180831161115d57829003601f168201915b5050509183525050600482015460208201526005820154604082015260068201546060820152600782015460ff81161515608083015261010090046001600160a01b031660a0820152600882015460c082015260099091015460e09091015292915050565b60008181526006602052604090205460609067ffffffffffffffff81111561120957611209611793565b60405190808252806020026020018201604052801561123c57816020015b60608152602001906001900390816112275790505b50905060005b60008381526006602052604090205481101561134057600083815260066020526040902080548290811061127857611278611c94565b9060005260206000209060020201600001805461129490611caa565b80601f01602080910402602001604051908101604052809291908181526020018280546112c090611caa565b801561130d5780601f106112e25761010080835404028352916020019161130d565b820191906000526020600020905b8154815290600101906020018083116112f057829003601f168201915b505050505082828151811061132457611324611c94565b60200260200101819052508061133990611e03565b9050611242565b50919050565b855160000361139057604051631f200c7360e31b81526020600482015260156024820152745469746c652063616e6e6f7420626520656d70747960581b60448201526064016103ec565b826000036113e157604051631f200c7360e31b815260206004820152601d60248201527f5469636b6574205072697a65206d75737420626520706f73697469766500000060448201526064016103ec565b42811161143157604051631f200c7360e31b815260206004820152601c60248201527f45787069726174696f6e206d75737420626520696e206675747572650000000060448201526064016103ec565b600280549060019060006114458385611e39565b9091555050604080516101608101825282815260208082018a81528284018a90526060830189905260808301889052600060a0840181905260c0840188905260e084018190523361010085015242610120850152610140840187905285815260049092529290208151815591519091829160018201906114c59082611d2d565b50604082015160028201906114da9082611d2d565b50606082015160038201906114ef9082611d2d565b506080820151600482015560a0820151600582015560c0820151600682015560e0820151600782018054610100808601516001600160a01b031602610100600160a81b0319931515939093166001600160a81b031990911617919091179055610120820151600882015561014090910151600990910155604051339083907f73ac9939c0fae9d35f1ff5450b52cb43bf0601ae6cc29f9d7eb5967b91e7505990600090a35050505050505050565b606060025467ffffffffffffffff8111156115ba576115ba611793565b6040519080825280602002602001820160405280156115f357816020015b6115e061170c565b8152602001906001900390816115d85790505b50905060005b60025481101561164d5781818151811061161557611615611c94565b602002602001015182828151811061162f5761162f611c94565b6020026020010181905250808061164590611e03565b9150506115f9565b5090565b61165961168f565b6001600160a01b03811661168357604051631e4fbdf760e01b8152600060048201526024016103ec565b61168c816116bc565b50565b6000546001600160a01b03163314610f705760405163118cdaa760e01b81523360048201526024016103ec565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040518061016001604052806000815260200160608152602001606081526020016060815260200160008152602001600081526020016000815260200160001515815260200160006001600160a01b0316815260200160008152602001600081525090565b6000806040838503121561178457600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156117d2576117d2611793565b604052919050565b600082601f8301126117eb57600080fd5b813567ffffffffffffffff81111561180557611805611793565b611818601f8201601f19166020016117a9565b81815284602083860101111561182d57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561185d57600080fd5b8235915060208084013567ffffffffffffffff8082111561187d57600080fd5b818601915086601f83011261189157600080fd5b8135818111156118a3576118a3611793565b8060051b6118b28582016117a9565b918252838101850191858101908a8411156118cc57600080fd5b86860192505b83831015611908578235858111156118ea5760008081fd5b6118f88c89838a01016117da565b83525091860191908601906118d2565b809750505050505050509250929050565b60006020828403121561192b57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156119735783516001600160a01b03168352928401929184019160010161194e565b50909695505050505050565b6000815180845260005b818110156119a557602081850181015186830182015201611989565b506000602082860101526020601f19601f83011685010191505092915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611a1a57603f19888603018452611a0885835161197f565b945092850192908501906001016119ec565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015611a9657888303603f19018552815180516001600160a01b03168452870151878401879052611a838785018261197f565b9588019593505090860190600101611a4e565b509098975050505050505050565b600060208284031215611ab657600080fd5b81356001600160a01b03811681146109d457600080fd5b6000610160825184526020830151816020860152611aed8286018261197f565b91505060408301518482036040860152611b07828261197f565b91505060608301518482036060860152611b21828261197f565b9150506080830151608085015260a083015160a085015260c083015160c085015260e0830151611b5560e086018215159052565b50610100838101516001600160a01b03169085015261012080840151908501526101409283015192909301919091525090565b6020815260006109d46020830184611acd565b60008060008060008060c08789031215611bb457600080fd5b863567ffffffffffffffff80821115611bcc57600080fd5b611bd88a838b016117da565b97506020890135915080821115611bee57600080fd5b611bfa8a838b016117da565b96506040890135915080821115611c1057600080fd5b50611c1d89828a016117da565b945050606087013592506080870135915060a087013590509295509295509295565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611a1a57603f19888603018452611c82858351611acd565b94509285019290850190600101611c66565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680611cbe57607f821691505b60208210810361134057634e487b7160e01b600052602260045260246000fd5b601f821115611d2857600081815260208120601f850160051c81016020861015611d055750805b601f850160051c820191505b81811015611d2457828155600101611d11565b5050505b505050565b815167ffffffffffffffff811115611d4757611d47611793565b611d5b81611d558454611caa565b84611cde565b602080601f831160018114611d905760008415611d785750858301515b600019600386901b1c1916600185901b178555611d24565b600085815260208120601f198616915b82811015611dbf57888601518255948401946001909101908401611da0565b5085821015611ddd5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b600060018201611e1557611e15611ded565b5060010190565b8082028115828204841417611e3357611e33611ded565b92915050565b80820180821115611e3357611e33611ded56fea2646970667358221220f22794293d11710a78ea5da4abdad66c9e5e27b26e9986aa0c1b6eca7933ae1664736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 162,
        "contract": "contracts/LotteryManager.sol:LotteryManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1174,
        "contract": "contracts/LotteryManager.sol:LotteryManager",
        "label": "game",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ILotteryGame)1167"
      },
      {
        "astId": 1176,
        "contract": "contracts/LotteryManager.sol:LotteryManager",
        "label": "_totalLotteries",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1181,
        "contract": "contracts/LotteryManager.sol:LotteryManager",
        "label": "platformBalance",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1186,
        "contract": "contracts/LotteryManager.sol:LotteryManager",
        "label": "lotteries",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(LotteryStruct)1071_storage)"
      },
      {
        "astId": 1192,
        "contract": "contracts/LotteryManager.sol:LotteryManager",
        "label": "lotteryParticipants",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_array(t_struct(ParticipationStruct)1076_storage)dyn_storage)"
      },
      {
        "astId": 1198,
        "contract": "contracts/LotteryManager.sol:LotteryManager",
        "label": "lotteryLuckyNumbers",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_array(t_struct(LuckyNumber)1081_storage)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(LuckyNumber)1081_storage)dyn_storage": {
        "base": "t_struct(LuckyNumber)1081_storage",
        "encoding": "dynamic_array",
        "label": "struct ILotteryManager.LuckyNumber[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(ParticipationStruct)1076_storage)dyn_storage": {
        "base": "t_struct(ParticipationStruct)1076_storage",
        "encoding": "dynamic_array",
        "label": "struct ILotteryManager.ParticipationStruct[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ILotteryGame)1167": {
        "encoding": "inplace",
        "label": "contract ILotteryGame",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_array(t_struct(LuckyNumber)1081_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ILotteryManager.LuckyNumber[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(LuckyNumber)1081_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_array(t_struct(ParticipationStruct)1076_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ILotteryManager.ParticipationStruct[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(ParticipationStruct)1076_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(LotteryStruct)1071_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ILotteryManager.LotteryStruct)",
        "numberOfBytes": "32",
        "value": "t_struct(LotteryStruct)1071_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(LotteryStruct)1071_storage": {
        "encoding": "inplace",
        "label": "struct ILotteryManager.LotteryStruct",
        "members": [
          {
            "astId": 1050,
            "contract": "contracts/LotteryManager.sol:LotteryManager",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1052,
            "contract": "contracts/LotteryManager.sol:LotteryManager",
            "label": "title",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1054,
            "contract": "contracts/LotteryManager.sol:LotteryManager",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1056,
            "contract": "contracts/LotteryManager.sol:LotteryManager",
            "label": "imageURL",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1058,
            "contract": "contracts/LotteryManager.sol:LotteryManager",
            "label": "ticketPrice",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1060,
            "contract": "contracts/LotteryManager.sol:LotteryManager",
            "label": "numOfParticipants",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1062,
            "contract": "contracts/LotteryManager.sol:LotteryManager",
            "label": "servicePercent",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1064,
            "contract": "contracts/LotteryManager.sol:LotteryManager",
            "label": "drawn",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 1066,
            "contract": "contracts/LotteryManager.sol:LotteryManager",
            "label": "owner",
            "offset": 1,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 1068,
            "contract": "contracts/LotteryManager.sol:LotteryManager",
            "label": "createdAt",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 1070,
            "contract": "contracts/LotteryManager.sol:LotteryManager",
            "label": "expiresAt",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(LuckyNumber)1081_storage": {
        "encoding": "inplace",
        "label": "struct ILotteryManager.LuckyNumber",
        "members": [
          {
            "astId": 1078,
            "contract": "contracts/LotteryManager.sol:LotteryManager",
            "label": "number",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1080,
            "contract": "contracts/LotteryManager.sol:LotteryManager",
            "label": "isUsed",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ParticipationStruct)1076_storage": {
        "encoding": "inplace",
        "label": "struct ILotteryManager.ParticipationStruct",
        "members": [
          {
            "astId": 1073,
            "contract": "contracts/LotteryManager.sol:LotteryManager",
            "label": "account",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1075,
            "contract": "contracts/LotteryManager.sol:LotteryManager",
            "label": "lotteryNumber",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}